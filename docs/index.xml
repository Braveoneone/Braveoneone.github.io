<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yiyi&#39;s blog</title>
    <link>http://Braveoneone.github.io/</link>
    <description>Recent content on Yiyi&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 06 Sep 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://Braveoneone.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://Braveoneone.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://Braveoneone.github.io/about/</guid>
      
        <description>&lt;h1 id=&#34;about-me&#34;&gt;About me&lt;/h1&gt;
&lt;p&gt;Hi everyone, I&amp;rsquo;m Yiyi Wang, a master student majoring in Language Techonology at University of Gothenburg. I&amp;rsquo;m interested in computer system and natural language processing. I got my B.Eng in Computer Science at School of Computer Science, Wuhan University.&lt;/p&gt;
&lt;p&gt;Email: guswanyie [AT] student dot gu dot se&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Github Page 搭建个人主页</title>
      <link>http://Braveoneone.github.io/post/github-hugo/</link>
      <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>http://Braveoneone.github.io/post/github-hugo/</guid>
      
        <description>&lt;p&gt;GitHub Pages 是一个静态站点托管服务，直接将个人、组织或项目的页面托管于 GitHub 库或仓库 (repository) 中。
Hugo 是一个用 Go 语言编写的静态站点生成器，它针对速度、易用性和可配置性进行了优化，快速灵活。&lt;/p&gt;
&lt;h2 id=&#34;error大集合&#34;&gt;error大集合&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;error: 源引用规格 master 没有匹配&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;error: 推送一些引用到 &amp;lsquo;github.com:‘&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit -m &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;You&amp;rsquo;ve added another git repository inside your current repository.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rm -r --cached log  //删除对log的track

git submodule add url //添加log到子目录
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我这里是 git submodule add &amp;ndash;depth=1 &lt;a href=&#34;https://github.com/xianmin/hugo-theme-jane.git&#34;&gt;https://github.com/xianmin/hugo-theme-jane.git&lt;/a&gt; themes/jane   &amp;ndash;depth&lt;/p&gt;
&lt;p&gt;&lt;em&gt;error: build and deploy all jobs have failed&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;解决：生成编译文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo -d docs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再在仓库的setting中选择docs&lt;/p&gt;
&lt;p&gt;该方式的优点是将源文件与编译文件分开&lt;/p&gt;
&lt;p&gt;&lt;em&gt;fatal: unable to access &amp;ldquo;&amp;hellip;github&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;解决：用SSH方式连接，不要用HTTP。&lt;/p&gt;
&lt;p&gt;同时注意SSH是否已经与另一个账号连接，若有则需要删除。&lt;/p&gt;
&lt;h1 id=&#34;其他命令&#34;&gt;其他命令&lt;/h1&gt;
&lt;p&gt;git command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote -v //查看远程仓库

git init //初始化仓库

git clean

git add .

git commit -m &amp;quot;doc&amp;quot;

git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;hugo command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new site site_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可得到如下目录结构&lt;/p&gt;
&lt;p&gt;personal-site&lt;/p&gt;
&lt;p&gt;├── archetypes&lt;/p&gt;
&lt;p&gt;├── config.toml   //Hugo的配置文档&lt;/p&gt;
&lt;p&gt;├── content       //存放所有Markdown格式的文章&lt;/p&gt;
&lt;p&gt;├── data&lt;/p&gt;
&lt;p&gt;├── layouts&lt;/p&gt;
&lt;p&gt;├── static&lt;/p&gt;
&lt;p&gt;└── themes        //存放下载的主题&lt;/p&gt;
&lt;p&gt;编译网站&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会在/public中生成网页文件&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>K-means in Spark realization task plan </title>
      <link>http://Braveoneone.github.io/post/post20200619/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>http://Braveoneone.github.io/post/post20200619/</guid>
      
        <description>&lt;p&gt;K-means in Spark realization task plan&lt;/p&gt;
&lt;p&gt;K-means algorithm is provided by Spark&lt;/p&gt;
&lt;p&gt;(in examples/src/main/scala/org/apache/spark/examples/mllib/KMeanExample.scala)&lt;/p&gt;
&lt;p&gt;DRAM: 192GB (12x 16GB DDR4 2666)&lt;/p&gt;
&lt;p&gt;Intel Optane DC Persistent Memory: 1.4TB (12x 126GB)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Optane configuration:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(1)	AppDirect Mode&lt;/p&gt;
&lt;p&gt;Optane configuration:&lt;/p&gt;
&lt;p&gt;ipmctl create -goal PersistentMemoryType=AppDirectNotInterleaved&lt;/p&gt;
&lt;p&gt;Expose persistent memory to application:&lt;/p&gt;
&lt;p&gt;ipmctl create -namesapce (Fsdax mode)&lt;/p&gt;
&lt;p&gt;mkdir /mnt/pmemdir&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkfs.ext4 /dev/pmem{X.Y}

mount -o dax /dev/pmem{X.Y} /mnt/pmemdir
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(2)	DRAM-Only&lt;/p&gt;
&lt;p&gt;Optane configuration: ipmctl create -goal MemoryMode=100&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Spark configuration&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Workload:&lt;/p&gt;
&lt;p&gt;Data Size:&lt;/p&gt;
&lt;p&gt;K-means(Iteration times):&lt;/p&gt;
&lt;p&gt;K-means(K value):&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>NUMA</title>
      <link>http://Braveoneone.github.io/post/post20200930/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://Braveoneone.github.io/post/post20200930/</guid>
      
        <description>&lt;p&gt;numastat to collect the memory consumption&lt;/p&gt;
&lt;h1 id=&#34;显示每个numanon-uniform-memory-architecture节点的内存统计信息&#34;&gt;显示每个NUMA(Non-Uniform Memory Architecture)节点的内存统计信息&lt;/h1&gt;
&lt;p&gt;$ numastat&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                           node0

numa_hit                 2419687

numa_miss                      0

numa_foreign                   0

interleave_hit             17197

local_node               2419687

other_node                     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出项&lt;/p&gt;
&lt;p&gt;numa_hit:    预期的内存在这个节点上成功分配&lt;/p&gt;
&lt;p&gt;numa_miss:    在这个节点上分配内存，但进程使用了不同的节点。每个numa_miss在另一个节点上有一个numa_foreign&lt;/p&gt;
&lt;p&gt;numa_foreign: 为改节点准备的内存实际被分配到了别的节点上，每个numa_foreign在另一个节点上有一个numa_miss&lt;/p&gt;
&lt;p&gt;interleave_hit: 预期的这个节点上成功交错分配的内存&lt;/p&gt;
&lt;p&gt;local_node: 当一个进程在节点上运行的时候，在这个节点上分配的内存&lt;/p&gt;
&lt;p&gt;other_node: 当一个进程运行在其它节点上，在这个节点分配的内存&lt;/p&gt;
&lt;p&gt;参数项&lt;/p&gt;
&lt;p&gt;o	-c： 基于数据内容当台收缩列的宽度，内存被四舍五入为MB，对更密集显示多个NUMA节点的系统有帮助&lt;/p&gt;
&lt;p&gt;o	$ numastat -c&lt;/p&gt;
&lt;p&gt;o	    Per-node numastat info (in MBs):&lt;/p&gt;
&lt;p&gt;o	                    Node 0 Total&lt;/p&gt;
&lt;p&gt;o	                    &amp;mdash;&amp;mdash; &amp;mdash;&amp;ndash;&lt;/p&gt;
&lt;p&gt;o	    Numa_Hit          1462  1462&lt;/p&gt;
&lt;p&gt;o	    Numa_Miss            0     0&lt;/p&gt;
&lt;p&gt;o	    Numa_Foreign         0     0&lt;/p&gt;
&lt;p&gt;o	    Interleave_Hit      67    67&lt;/p&gt;
&lt;p&gt;o	    Local_Node        1462  1462&lt;/p&gt;
&lt;p&gt;o	    Other_Node           0     0&lt;/p&gt;
&lt;p&gt;o	-m： 生成每个节点的内存使用信息&lt;/p&gt;
&lt;p&gt;o	$ numastat -m&lt;/p&gt;
&lt;p&gt;o	    Per-node system memory usage (in MBs):&lt;/p&gt;
&lt;p&gt;o	                              Node 0           Total&lt;/p&gt;
&lt;p&gt;o	                     &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;
&lt;p&gt;o	    MemTotal                 1992.20         1992.20&lt;/p&gt;
&lt;p&gt;o	    MemFree                  1503.52         1503.52&lt;/p&gt;
&lt;p&gt;o	    MemUsed                   488.67          488.67&lt;/p&gt;
&lt;p&gt;o	    Active                    201.73          201.73&lt;/p&gt;
&lt;p&gt;o	    Inactive                  193.01          193.01&lt;/p&gt;
&lt;p&gt;o	    Active(anon)              111.65          111.65&lt;/p&gt;
&lt;p&gt;o	    Inactive(anon)              5.83            5.83&lt;/p&gt;
&lt;p&gt;o	    Active(file)               90.08           90.08&lt;/p&gt;
&lt;p&gt;o	    Inactive(file)            187.18          187.18&lt;/p&gt;
&lt;p&gt;o	    Unevictable                 0.00            0.00&lt;/p&gt;
&lt;p&gt;o	    &amp;hellip;&lt;/p&gt;
&lt;p&gt;o	-n：显示原始数据统计信息&lt;/p&gt;
&lt;p&gt;o	$ numastat -n
o	    Per-node numastat info (in MBs):&lt;/p&gt;
&lt;p&gt;o	                              Node 0           Total&lt;/p&gt;
&lt;p&gt;o	                     &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;
&lt;p&gt;o	    Numa_Hit                 1492.13         1492.13&lt;/p&gt;
&lt;p&gt;o	    Numa_Miss                   0.00            0.00&lt;/p&gt;
&lt;p&gt;o	    Numa_Foreign                0.00            0.00&lt;/p&gt;
&lt;p&gt;o	    Interleave_Hit             67.20           67.20&lt;/p&gt;
&lt;p&gt;o	    Local_Node               1492.13         1492.13&lt;/p&gt;
&lt;p&gt;o	    Other_Node                  0.00            0.00&lt;/p&gt;
&lt;p&gt;o	-p：为指定进程显示每个节点的内存分配信息&lt;/p&gt;
&lt;p&gt;o	$ sudo numastat -p 1264&lt;/p&gt;
&lt;p&gt;o	    Per-node process memory usage (in MBs) for PID 1264 (docker-containe)&lt;/p&gt;
&lt;p&gt;o	                               Node 0           Total&lt;/p&gt;
&lt;p&gt;o	                      &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;
&lt;p&gt;o	    Huge                         0.00            0.00&lt;/p&gt;
&lt;p&gt;o	    Heap                         0.00            0.00&lt;/p&gt;
&lt;p&gt;o	    Stack                        2.14            2.14&lt;/p&gt;
&lt;p&gt;o	    Private                      9.62            9.62&lt;/p&gt;
&lt;p&gt;o	    &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-  &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;
&lt;p&gt;o	    Total                       11.77           11.77&lt;/p&gt;
&lt;p&gt;o	-s：以降序排序，列出最大内存消费者&lt;/p&gt;
&lt;p&gt;o	$ numastat -s&lt;/p&gt;
&lt;p&gt;o	    Per-node numastat info (in MBs):&lt;/p&gt;
&lt;p&gt;o	                              Node 0           Total&lt;/p&gt;
&lt;p&gt;o	                     &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;
&lt;p&gt;o	    Numa_Hit                 1514.71         1514.71&lt;/p&gt;
&lt;p&gt;o	    Local_Node               1514.71         1514.71&lt;/p&gt;
&lt;p&gt;o	    Interleave_Hit             67.20           67.20&lt;/p&gt;
&lt;p&gt;o	    Numa_Foreign                0.00            0.00&lt;/p&gt;
&lt;p&gt;o	    Numa_Miss                   0.00            0.00&lt;/p&gt;
&lt;p&gt;o	    Other_Node                  0.00            0.00&lt;/p&gt;
&lt;p&gt;o	-v：显示详细信息&lt;/p&gt;
&lt;p&gt;o	-s：忽略值为0的项&lt;/p&gt;
&lt;p&gt;o	$ numastat -z&lt;/p&gt;
&lt;p&gt;o	    Per-node numastat info (in MBs):&lt;/p&gt;
&lt;p&gt;o	                              Node 0           Total&lt;/p&gt;
&lt;p&gt;o	                     &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;
&lt;p&gt;o	    Numa_Hit                 1535.98         1535.98&lt;/p&gt;
&lt;p&gt;o	    Interleave_Hit             67.20           67.20&lt;/p&gt;
&lt;p&gt;o	    Local_Node               1535.98         1535.98&lt;/p&gt;
&lt;p&gt;pcm-memory command to collect the bandwidth from hardware counters.&lt;/p&gt;
&lt;h1 id=&#34;numa&#34;&gt;Numa&lt;/h1&gt;
&lt;p&gt;NUMA（Non Uniform Memory Access Architecture）技术可以使众多服务器像单一系统那样运转，同时保留小系统便于编程和管理的优点。非统一内存访问（NUMA）是一种用于多处理器的电脑记忆体设计，内存访问时间取决于处理器的内存位置。 在NUMA下，处理器访问它自己的本地存储器的速度比非本地存储器（存储器的地方到另一个处理器之间共享的处理器或存储器）快一些。&lt;/p&gt;
&lt;h1 id=&#34;optane&#34;&gt;Optane&lt;/h1&gt;
&lt;p&gt;中文名称”傲腾“，是一种超高速内存新技术，兼容NVMe存储协议。Optane兼容NVMe存储协议，苹果已经在其MacBook部分机型中使用了NVMe（非易失性存储器）存储协议。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>MacOS判断终端是否走代理</title>
      <link>http://Braveoneone.github.io/post/post20200922/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://Braveoneone.github.io/post/post20200922/</guid>
      
        <description>&lt;p&gt;curl cip.cc&lt;/p&gt;
&lt;p&gt;MAC下载homebrew失败卡在了head ……..，&lt;/p&gt;
&lt;p&gt;首先common shit g进入到usr/local中发现存在home-brew文件夹，将文件夹删除后，再使用下载命令。下载发现速度非常慢，因为没有把终端设置为全局代理。&lt;/p&gt;
&lt;p&gt;设置终端全局代理命令：&lt;/p&gt;
&lt;p&gt;export http_proxy=http://127.0.0.1:1087;&lt;/p&gt;
&lt;p&gt;export https_proxy=http://127.0.0.1:1087;&lt;/p&gt;
&lt;p&gt;取消代理访问命令：&lt;/p&gt;
&lt;p&gt;unset http_proxy&lt;/p&gt;
&lt;p&gt;unset https_proxy&lt;/p&gt;
&lt;p&gt;单独为git设置全局代理：&lt;/p&gt;
&lt;p&gt;git config &amp;ndash;global http.proxy 127.0.0.1:1088&lt;/p&gt;
&lt;p&gt;查看代理：&lt;/p&gt;
&lt;p&gt;git config &amp;ndash;get http.proxy&lt;/p&gt;
&lt;p&gt;git代理清除&lt;/p&gt;
&lt;p&gt;git config &amp;ndash;global &amp;ndash;unset http.proxy&lt;/p&gt;
&lt;p&gt;git config &amp;ndash;global &amp;ndash;unset https.proxy&lt;/p&gt;
&lt;p&gt;安装完成后有警告Warning: /usr/local/bin is not in your PATH.&lt;/p&gt;
&lt;p&gt;修改环境变量配置文件&lt;/p&gt;
&lt;p&gt;open ~/.bash_profile&lt;/p&gt;
&lt;p&gt;文件中写： export PATH=/usr/local/bin:$PATH&lt;/p&gt;
&lt;p&gt;source ~/.bash_profile #更新配置后的环境变量&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>qgis2.14.11的编译 ----WIN10&#43;QT4&#43;VS2010</title>
      <link>http://Braveoneone.github.io/post/-gis1.1/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://Braveoneone.github.io/post/-gis1.1/</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;https://braveoneone.github.io/GIS11.pdf&#34;&gt;qgis2.14.11的编译 &amp;mdash;-WIN10+QT4+VS2010&lt;/a&gt;
&lt;img src=&#34;https://braveoneone.github.io/GIS11.pdf&#34; alt=&#34;qgis2.14.11的编译 &amp;amp;mdash;-WIN10+QT4+VS2010&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>基于QGIS的GIS原型系统</title>
      <link>http://Braveoneone.github.io/post/-gis1.2/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://Braveoneone.github.io/post/-gis1.2/</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;https://braveoneone.github.io/GIS12.pdf&#34;&gt;基于QGIS的GIS原型系统&lt;/a&gt;
&lt;img src=&#34;https://braveoneone.github.io/GIS12.pdf&#34; alt=&#34;基于QGIS的GIS原型系统&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>C语⾔⼦集编译器</title>
      <link>http://Braveoneone.github.io/post/javacc/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://Braveoneone.github.io/post/javacc/</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;https://braveoneone.github.io/javacc.pdf&#34;&gt;C语⾔⼦集编译器&lt;/a&gt;
&lt;img src=&#34;https://braveoneone.github.io/javacc.pdf&#34; alt=&#34;C语⾔⼦集编译器&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>多周期CPU流⽔线设计</title>
      <link>http://Braveoneone.github.io/post/mutilcpu/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://Braveoneone.github.io/post/mutilcpu/</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;https://braveoneone.github.io/cpuVHDL.pdf&#34;&gt;多周期CPU流⽔线设计&lt;/a&gt;
&lt;img src=&#34;https://braveoneone.github.io/cpuVHDL.pdf&#34; alt=&#34;多周期CPU流⽔线设计&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
